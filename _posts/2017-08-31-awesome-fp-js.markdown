---
title: "Awesome functional programming en JavaScript‚Ää‚Äî‚ÄäSpanish version"
layout: post
date: 2017-08-31 23:48
image: /assets/images/markdown.jpg
headerImage: false
tag:
- functional programming
- javascript
- typescript
- ramda
- sanctuary
category: blog
author: Ricardo Pallas
projects: true
description: FP state of the art in JS
# jemoji: '<img class="emoji" title=":ramen:" alt=":ramen:" src="https://assets.github.com/images/icons/emoji/unicode/1f35c.png" height="20" width="20" align="absmiddle">'
---

JavaScript es un lenguaje de programaci√≥n multi-paradigma, casi siempre
utilizado orientado a objetos, aunque debido a su gran popularidad, se podr√≠a
decir que es el lenguaje de programaci√≥n funcional (**FP**) m√°s utilizado.

**Disclaimer:*** Este art√≠culo no pretende ense√±ar ni introducir en profundidad
la programaci√≥n funcional, sino que es una gu√≠a de bibliotecas y recursos, para
poder utilizar la mayor√≠a de herramientas y capacidades que da el estilo de
programaci√≥n funcional en JavaScript.*

![](https://cdn-images-1.medium.com/max/1600/1*5Ma0Z2oOwOsyJFAwT43kMg.png)
<span class="figcaption_hack">Lambda ‚Äî Representa el [lambda
calculus](https://en.wikipedia.org/wiki/Lambda_calculus), base de la
programaci√≥n funcional.</span>

#### ¬øQu√© es la programaci√≥n funcional?

Empecemos con una breve introducci√≥n de la programaci√≥n funcional para ponernos
en contexto.

La programaci√≥n funcional es un paradigma de programaci√≥n que se basa en
funciones modeladas como funciones matem√°ticas. La esencia de la programaci√≥n
funcional es que los programas son una combinaci√≥n de expresiones. Las
expresiones pueden ser valores concretos, variables o funciones. Las funciones
se pueden definir de forma m√°s espec√≠fica: son expresiones a las cuales se les
aplica un argumento o entrada, y una vez aplicadas, se pueden **reducir** o
**evaluar**. En los lenguajes funcionales y lenguajes modernos, las funciones
son ciudadanos de primer clase: se pueden utilizar como valores o pueden ser
pasadas como argumentos, o entradas, a otras funciones.

Cabe destacar que, los lenguajes puramente funcionales, est√°n todos basados en
el [lambda calculus](https://en.wikipedia.org/wiki/Lambda_calculus).

#### ¬øPor qu√© JavaScript?

Ciertamente, no es el mejor lenguaje para hacer FP, siendo que la corriente
actual suele programar en JavaScript de forma imperativa. Adem√°s, no es un
lenguaje de programaci√≥n funcional
[puro](https://www.fpcomplete.com/blog/2017/04/pure-functional-programming), y
es d√©bilmente y din√°micamente tipado üò•.

Sin embargo, sus puntos a favor son:

* Es uno de los lenguajes m√°s utilizados en la industria y seguramente trabajes
con √©l.
* Lo m√°s probable, es que ya sepas programar en JavaScript. No tienes que aprender
un lenguaje nuevo.
* Con la ayuda de bibliotecas puedes utilizar muchas de las herramientas de la FP.

### Bibliotecas (que facilitan la programaci√≥n funcional)

Voy a hablar, en este punto, de unas pocas bibliotecas, que he elegido y
utilizado para FP en JavaScript.

#### Sanctuary

La primera de ellas (y mi favorita) es [Sanctuary](https://sanctuary.js.org/),
cuyo lema es *‚ÄúEl refugio del JavaScript inseguro‚Äù, *refiri√©ndose a que ayuda a
eliminar muchos errores en tiempo de ejecuci√≥n, sobre todos los provocados por
valores nulos.

Sanctuary est√° inspirado por los lenguajes de programaci√≥n Haskell y PureScript.
Provee un conjunto de funciones similares a Ramda y lodash-fp, pero muchas de
ellas son seguras y trabajan con *data types* directamente, como por ejemplo el
tipo Maybe.

Provee dos *data types* b√°sicos, [Maybe](https://sanctuary.js.org/#maybe-type) y
[Either](https://sanctuary.js.org/#either-type), que cumplen la especificaci√≥n
de [Fantasy Land](https://github.com/fantasyland/fantasy-land/tree/v3.3.0), que
es la especificaci√≥n de facto de ADTs en JavaScript.

Promueve un estilo de programaci√≥n m√°s seguro, sin los odiosos null checks, y
reduce los posibles errores en tiempo de ejecuci√≥n.

Una gran ventaja es su **sistema de tipos** ad-hoc en tiempo de ejecuci√≥n,
definidos en
[sanctuary-def](https://github.com/sanctuary-js/sanctuary-def/tree/v0.12.1). Con
este sistema podemos detectar los errores causados por tipos de forma inmediata,
lo cual nos evita las cl√°sicas sorpresas de JavaScript‚Ä¶

Conviene leer la [entrevista](https://survivejs.com/blog/sanctuary-interview/)
que se le hizo a su creador, donde se explica el por qu√© de la biblioteca.

#### Fluture

[Fluture](https://github.com/fluture-js/Fluture), es una biblioteca para provee
de una m√≥nada para ejecutar c√≥digo as√≠ncrono, parecido a una promesa. Como tal,
representa un valor *success *o *failure, *que resulta de una operaci√≥n
as√≠ncrona de* *I/O. La diferencia es que Fluture es una m√≥nada (cumple con su
interfaz y leyes), por lo tanto se eval√∫a de forma perezosa y no lanza los
side-effects al crearla.

Puede haber confusi√≥n entre las similitudes de una Promesa con una m√≥nada. Se
podr√≠a decir que el *.then *es un *bind, *que el* resolve *es un* pure, etc.
*Pero no hay que olvidarse de que, una promesa, no ofrece la interfaz
especificada por Fantasy Land, ni mucho menos, las leyes de las m√≥nadas. Adem√°s
de que ejecutan la operaci√≥n as√≠ncrona (side effects) nada m√°s crearlas. Se
puede ver m√°s claro en este
[art√≠culo](https://glebbahmutov.com/blog/difference-between-promise-and-task/).

#### Daggy

[Daggy](https://github.com/fantasyland/daggy), es una peque√±a, pero muy √∫til,
biblioteca cuya finalidad es crear
[ADTs](https://en.wikipedia.org/wiki/Algebraic_data_type) (Tambi√©n llamados
[Union Types](https://guide.elm-lang.org/types/union_types.html) por la
comunidad JS/ELM). Permiten representar datos complejos de forma natural e
incluso emular [pattern
matching](https://gist.github.com/yang-wei/4f563fbf81ff843e8b1e).

En el siguiente [ejemplo](https://codesandbox.io/s/3x47m2x0x6), se puede ver
una** brillante manera** de usar las
[ADTs](https://en.wikipedia.org/wiki/Algebraic_data_type) creadas con **Daggy**
en componentes de **React**.

#### Otras

Cabe destacar tambi√©n, la biblioteca [RamdaJS](http://ramdajs.com/), que utilic√©
en su d√≠a junto a Sanctuary. Es una biblioteca de utilidades, es parecida a
Underscore o lodash, pero ahora, Sanctuary es mucho m√°s madura que al principio
y ha incorporado la mayor√≠a de funciones que provee Ramda, y por ello, dej√© de
usarla. Las principal diferencia entre ambas son como manejan las entradas
invalidas y el sistema de tipos en runtime. Ramda es m√°s insegura (sus funciones
pueden causar excepciones) porque los creadores no quieren utilizar data types
(ellos creen que les quitar√≠a usuarios), y solo proveen de funciones t√≠picas en
programaci√≥n funcional, como map, sin aprovechar todo el potencial de este
paradigma de programaci√≥n.

Y FolktaleJS, una de las pioneras. Su versi√≥n 1.o siempre ha sido muy respetada
y ahora est√°n haciendo un gran trabajo en la 2.0, reescribi√©ndola por completo.
Es el mismo concepto que Sanctuary, funciones tipo map, curry, chain, etc y
tipos de datos como Maybe, Either, Validation‚Ä¶ Se podr√≠a decir que Folktale es
m√°s orientado a un estilo Java y Sanctuary m√°s hacia Haskell. Adem√°s Folktale
incluye el tipo *Task* para tareas as√≠ncronas, muy parecido a lo que ofrece la
biblioteca Fluture.

### Libros y art√≠culos

* [Professor Frisby‚Äôs Mostly Adequate Guide to Functional
Programming](https://github.com/MostlyAdequate/mostly-adequate-guide) ‚Äî Libro
por excelencia en FP en JS, escrito por [Brian
Lonsdorf](https://twitter.com/drboolean). Introduce al paradigma de programaci√≥n
funcional **en general** utilizando JavaScript. Es una introducci√≥n pr√°ctica,
que va a√±adiendo, desde la intuici√≥n, ejemplos reales. Es un libro
imprescindible si no se tiene experiencia previa con FP.
* [Functional-Light JavaScript](https://github.com/getify/functional-light-js) ‚Äî
Este libro explora aquellos principios b√°sicos de la FP que se pueden aplicar en
JS. Se diferencia en su enfoque pr√°ctico, sin usar toda la terminolog√≠a, que a
muchos les echa atr√°s.
* [Why Curry Helps](https://hughfdjackson.com/javascript/why-curry-helps/) ‚Äî Una
visi√≥n general de como el currying ayuda a escribir c√≥digo mas reusable y
declarativo.
* [Functional Mumbo Jumbo ‚Äî
ADTs](http://blog.jenkster.com/2016/06/functional-mumbo-jumbo-adts.html) ‚Äî Una
introducci√≥n a los tipos algebraicos de datos, para principiantes.

### Ejemplos

* En el [repositorio](https://github.com/RPallas92/congreso-web-2016) del taller
que di en el Congreso web en 2016 acerca de la programaci√≥n funcional en JS,
podr√°s encontrar las
[slides](https://github.com/RPallas92/congreso-web-2016/blob/master/slides.pdf)
y el [proyecto de
ejemplo](https://github.com/RPallas92/congreso-web-2016/tree/master/app_videos/app_finished),
un **buscador de v√≠deos de Youtube (utilizando React y FP).**
* [Escape from Callback
Mountain](https://github.com/justsml/escape-from-callback-mountain) ‚Äî
Refactorizaci√≥n, dise√±o y buenas pr√°cticas.
* Design & refactoring tips for Promise-based Functional JavaScript. Key benefits
include better readability, testability, and reusability. MIT.

### **Otros recursos**

El repositorio de [Awesome FP JS](https://github.com/stoeffel/awesome-fp-js)
provee de muchos recursos adem√°s de los aqu√≠ comentados.

### Bola extra: TypeScript

S√≥lo comentar que se [Giulio Canti](https://github.com/gcanti) est√° en proceso
de creaci√≥n de la biblioteca [FP-TS](https://github.com/gcanti/fp-ts), que
permitir√° el uso de la **programaci√≥n funcional en TypeScript**, con la gran
mejora sobre JavaScript, de los tipos, que ayudan a escribir c√≥digo m√°s
correcto. Gracias a estos, se puede emular cierto grado de **pattern matching en
TypeScript**, sin bibliotecas adicionales, como se explica
[aqu√≠.](https://pattern-matching-with-typescript.alabor.me/)

### Conclusi√≥n

Con la combinaci√≥n de las bibliotecas **Sanctuary, Fluture, Daggy**, podemos
llegar a programar en el paradigma de programaci√≥n funcional de una manera muy
similar a la que lo har√≠amos en cualquier otro lenguaje funcional, salvando las
distancias.

Con este art√≠culo quer√≠a demostrar que es posible poner en pr√°ctica los
conceptos y herramientas de la FP, sin tener que recurrir a un lenguaje
especializado.

Por otro lado quiero decir, que por s√≥lo hacer FP no vas a desarrollar programas
perfectos, sino que te expones a los mismos problemas que si no haces FP‚Ä¶ pero
que aprender FP te va a ayudar a aprender nuevos conceptos para ser mejor
programador‚Ä¶ como se discute
[aqu√≠](https://medium.com/@bfil/just-enough-functional-programming-a0c4fd09c8f7).

Tambi√©n quiero recomendar el uso en desarrollos frontend de otros lenguajes
tipados como [PureScript](http://www.purescript.org/), Elm, ReasonML, que ayudan
a escribir programas m√°s correctos, sobre todo cuando se trata de proyectos m√°s
grandes y complejos.

Antes de finalizar, decir que en los enlaces que se han ido poniendo a lo largo
del art√≠culo de puede ampliar m√°s informaci√≥n.

Finalmente, para el siguiente post, veremos un ejemplo sencillo de como parsear
JSON de un servidor de forma segura con programaci√≥n imperativa vs programaci√≥n
funcional.